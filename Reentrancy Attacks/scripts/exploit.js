const hre = require("hardhat");

async function main() {
  // Get accounts from Hardhat
  const [deployer, attackerSigner] = await hre.ethers.getSigners();

  console.log("--------------------------------------------------");
  console.log("Deployer Address:", deployer.address);
  console.log("Attacker Signer (EOA) Address:", attackerSigner.address);
  console.log("--------------------------------------------------");

  // Deploy the vulnerable contract using the deployer account
  const Vulnerable = await hre.ethers.getContractFactory("ReentrancyVulnerable", deployer);
  const vulnerable = await Vulnerable.deploy();
  console.log("ReentrancyVulnerable deployed at:", vulnerable.target);

  // Fund the vulnerable contract with 100 ETH to simulate a pool
  console.log("Funding the vulnerable contract with 100 ETH...");
  let tx = await vulnerable.deposit({ value: hre.ethers.parseEther("100") });
  await tx.wait();

  let vulnBalance = await hre.ethers.provider.getBalance(vulnerable.target);
  console.log("Vulnerable Contract Balance:", hre.ethers.formatEther(vulnBalance), "ETH");

  // Deploy the attacker contract using the attacker signer
  const Attacker = await hre.ethers.getContractFactory("ReentrancyAttacker", attackerSigner);
  const attacker = await Attacker.deploy(vulnerable.target);
  console.log("ReentrancyAttacker deployed at:", attacker.target);

  // Display balances before the attack
  console.log("--------------------------------------------------");
  console.log("Before attack:");
  vulnBalance = await hre.ethers.provider.getBalance(vulnerable.target);
  console.log("Vulnerable Contract Balance:", hre.ethers.formatEther(vulnBalance), "ETH");

  // New: Display attacker contract balance before the attack
  let attackerContractBalanceBefore = await hre.ethers.provider.getBalance(attacker.target);
  console.log("Attacker Contract Balance (before attack):", hre.ethers.formatEther(attackerContractBalanceBefore), "ETH");

  // Optionally, display the attacker's signer balance before the attack
  let attackerSignerBalanceBefore = await hre.ethers.provider.getBalance(attackerSigner.address);
  console.log("Attacker Signer (EOA) Balance (before attack):", hre.ethers.formatEther(attackerSignerBalanceBefore), "ETH");

  // Attacker initiates the attack with a 1 ETH deposit
  console.log("Attacker starting attack with 1 ETH...");
  tx = await attacker.attack({ value: hre.ethers.parseEther("1") });
  await tx.wait();

  // Display balances after the attack
  console.log("--------------------------------------------------");
  vulnBalance = await hre.ethers.provider.getBalance(vulnerable.target);
  console.log("After attack, Vulnerable Contract Balance:", hre.ethers.formatEther(vulnBalance), "ETH");

  let attackerContractBalanceAfter = await hre.ethers.provider.getBalance(attacker.target);
  console.log("After attack, Attacker Contract Balance (should be 0):", hre.ethers.formatEther(attackerContractBalanceAfter), "ETH");

  let attackerSignerBalanceAfter = await hre.ethers.provider.getBalance(attackerSigner.address);
  console.log("Attacker Signer (EOA) Balance:", hre.ethers.formatEther(attackerSignerBalanceAfter), "ETH");

  console.log("--------------------------------------------------");
  console.log("Attack complete.");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("Error during execution:", error);
    process.exit(1);
  });
